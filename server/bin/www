#!/usr/bin/env node

/**
 * Load configuration
 */
const config = require("../../config/config");
config();

/**
 * Module dependencies.
 */
// import http from "http";
// import debug from "debug";
// import app from "../app.js";
// import { init as initializeDatabase } from "../libs/mysql";
// import { initializeMongo } from "../libs/mongo";
// import Log from "../../libs/log";
//const log = Log("www");
const http = require("http");
const app = require("../app");
const debug = require("debug")("adherelive-rest:server");
const log = require("../../libs/log")("www");

// const { init: initializeDatabase } = require('../libs/mysql');
// const initModels = require('../libs/initModels');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.APP_PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string" ? "pipe " + addr : `port ${addr.port}`;
    debug("adherelive-rest:server")(`Listening on ${bind}`);
    log.info(`Starting server at ${bind}`);
}

/**
 * Initialize databases
 * For now, these are being initialized in the 'app' for performance
 */
// (async () => {
//     try {
//         await initializeDatabase();
//         initializeMongo();
//         // Add any other initialization logic if needed
//     } catch (err) {
//         console.error("Error during initialization:", err);
//     }
// })();
